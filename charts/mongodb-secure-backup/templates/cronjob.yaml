{{- if and .Values.enabled .Values.schedule.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "mongodb-backup.name" . }}
  labels:
    {{- include "mongodb-backup.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.schedule.cronExpression | quote }}
  successfulJobsHistoryLimit: {{ .Values.schedule.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.schedule.failedJobsHistoryLimit }}
  concurrencyPolicy: {{ .Values.schedule.concurrencyPolicy }}
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.schedule.backoffLimit }}
      {{- if .Values.schedule.activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ .Values.schedule.activeDeadlineSeconds }}
      {{- end }}
      template:
        metadata:
          labels:
            {{- include "mongodb-backup.selectorLabels" . | nindent 12 }}
            role: mongodb-backup
        spec:
          serviceAccountName: {{ include "mongodb-backup.name" . }}
          securityContext:
            runAsUser: {{ .Values.securityContext.pod.runAsUser }}
            runAsGroup: {{ .Values.securityContext.pod.runAsGroup }}
            fsGroup: {{ .Values.securityContext.pod.fsGroup }}
          restartPolicy: OnFailure
          # Add init container to prepare the backup directory
          initContainers:
            - name: prepare-backup-dir
              image: busybox
              command:
                - sh
                - -c
                - |
                  echo "Preparing backup directories..."
                  
                  # Create all required directories
                  mkdir -p /backup-data/db-exports
                  mkdir -p /backup-data/db-info
                  mkdir -p /backup-data/archives
                  mkdir -p /home/backupuser
                  
                  # Set proper permissions
                  chmod -R 777 /backup-data
                  chmod -R 777 /home/backupuser
                  
                  # Create test files to verify directories are writable
                  echo "test" > /backup-data/db-exports/test.txt
                  echo "test" > /backup-data/db-info/test.txt
                  echo "test" > /backup-data/archives/test.txt
                  
                  echo "Directory contents:"
                  ls -la /backup-data
                  ls -la /backup-data/db-exports
                  ls -la /backup-data/db-info
                  ls -la /backup-data/archives
                  
                  # Setup ownership
                  chown -R 10001:10001 /backup-data
                  chown -R 10001:10001 /home/backupuser
                  
                  echo "Backup directory preparation complete"
              securityContext:
                runAsUser: 0  # Run as root for directory creation
                allowPrivilegeEscalation: true
              volumeMounts:
                - name: backup-data
                  mountPath: /backup-data
                - name: home-volume
                  mountPath: /home
          containers:
            - name: {{ .Chart.Name }}
              securityContext:
                runAsNonRoot: {{ .Values.securityContext.container.runAsNonRoot }}
                allowPrivilegeEscalation: {{ .Values.securityContext.container.allowPrivilegeEscalation }}
                capabilities:
                  drop:
                    {{- toYaml .Values.securityContext.container.capabilities.drop | nindent 20 }}
                readOnlyRootFilesystem: false
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command:
                - "/bin/bash"
                - "-c"
                - |
                  echo "Starting MongoDB backup process..."
                  whoami
                  echo "Current user ID: $(id -u) and group ID: $(id -g)"
                  
                  # Setup directories for the backup
                  echo "Preparing configuration..."
                  mkdir -p /tmp/config
                  cp /app/config/mongodb_backup.ini /tmp/config/
                  chmod 644 /tmp/config/mongodb_backup.ini
                  
                  # Modify config to use correct directories
                  echo "Original config:"
                  cat /tmp/config/mongodb_backup.ini
                  
                  # Set specific directories in config
                  sed -i 's|output_dir = .*|output_dir = "/backup-data/db-exports"|g' /tmp/config/mongodb_backup.ini
                  
                  echo "Modified config:"
                  cat /tmp/config/mongodb_backup.ini
                  
                  # Set environment variables
                  export HOME=/home/backupuser
                  export BACKUP_OUTPUT_DIR=/backup-data/db-exports
                  
                  echo "Directory contents before backup:"
                  ls -la /backup-data
                  ls -la /backup-data/db-exports
                  ls -la /backup-data/db-info
                  ls -la /backup-data/archives
                  
                  # STEP 1: Save Database Information
                  echo "===== STEP 1: Saving Database Information ====="
                  if [ {{ .Values.backupTool.saveDbInfo }} = true ]; then
                    echo "Saving database information to JSON..."
                    python /app/mongodb_backup.py --config /tmp/config/mongodb_backup.ini --save-db-info
                    
                    # Copy to dedicated db-info directory
                    cp /backup-data/db-exports/database_info.json /backup-data/db-info/ || echo "No database info was created"
                    
                    echo "Database info directory contents:"
                    ls -la /backup-data/db-info
                  else
                    echo "Skipping database info - disabled in configuration"
                  fi
                  
                  # STEP 2: Export Databases
                  echo "===== STEP 2: Exporting Databases ====="
                  if [ {{ .Values.backupTool.exportDatabases }} = true ]; then
                    echo "Exporting MongoDB databases..."
                    python /app/mongodb_backup.py --config /tmp/config/mongodb_backup.ini --export
                    
                    echo "Database exports directory contents:"
                    ls -la /backup-data/db-exports
                    echo "Total exported files:"
                    find /backup-data/db-exports -type f | wc -l
                  else
                    echo "Skipping database export - disabled in configuration"
                  fi
                  
                  # STEP 3: Create Archive
                  echo "===== STEP 3: Creating Archive ====="
                  if [ {{ .Values.backupTool.createArchive }} = true ]; then
                    echo "Creating encrypted archive of database exports..."
                    
                    # Create archive with specific output directory
                    ARCHIVE_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                    
                    # Check if there are files to archive
                    EXPORT_FILE_COUNT=$(find /backup-data/db-exports -type f | wc -l)
                    if [ "$EXPORT_FILE_COUNT" -gt 0 ]; then
                        if [ {{ .Values.backupTool.deleteOriginal }} = true ]; then
                          python /app/mongodb_backup.py --config /tmp/config/mongodb_backup.ini --create-archive
                        else
                          python /app/mongodb_backup.py --config /tmp/config/mongodb_backup.ini --create-archive --keep-original
                        fi
                      
                      # Move archives to dedicated archives directory
                      find /backup-data -name "*.mdb" -not -path "*/archives/*" -exec mv {} /backup-data/archives/ \;
                      find /backup-data -name "*.mdb.meta.json" -not -path "*/archives/*" -exec mv {} /backup-data/archives/ \;
                      
                      echo "Archive directory contents:"
                      ls -la /backup-data/archives
                    else
                      echo "No files to archive - export directory is empty"
                    fi
                  else
                    echo "Skipping archive creation - disabled in configuration"  
                  fi
                  
                  echo "===== Backup Process Complete ====="
                  echo "Directory contents after backup:"
                  ls -la /backup-data
                  ls -la /backup-data/db-exports
                  ls -la /backup-data/db-info
                  ls -la /backup-data/archives
                  
                  # Show sizes
                  echo "Directory sizes:"
                  du -sh /backup-data/*
                  
                  echo "Backup completed successfully"
              env:
                - name: BACKUP_OUTPUT_DIR
                  value: "/backup-data/db-exports"
                - name: HOME
                  value: "/home/backupuser"
                {{- if .Values.connection.username }}
                - name: MONGO_USERNAME
                  value: {{ .Values.connection.username | quote }}
                {{- end }}
                {{- if .Values.connection.password }}
                - name: MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "mongodb-backup.name" . }}-secret
                      key: MONGO_PASSWORD
                {{- end }}
                - name: MONGO_HOST
                  value: {{ .Values.connection.host | quote }}
                - name: MONGO_PORT
                  value: {{ .Values.connection.port | quote }}
                - name: MONGO_AUTH_DB
                  value: {{ .Values.connection.authDb | quote }}
                - name: USE_SSL
                  value: {{ .Values.connection.useSSL | toString | quote }}
                {{- if .Values.connection.sslCAFile }}
                - name: SSL_CA_FILE
                  value: {{ .Values.connection.sslCAFile | quote }}
                {{- end }}
                - name: PRETTY_JSON
                  value: {{ .Values.export.prettyJson | toString | quote }}
                - name: MAX_CONCURRENT_EXPORTS
                  value: {{ .Values.export.maxConcurrentExports | quote }}
                - name: EXCLUDE_DBS
                  value: {{ .Values.filters.excludeDbs | quote }}
                - name: EXCLUDE_COLLECTIONS
                  value: {{ .Values.filters.excludeCollections | quote }}
                - name: ENCRYPTION_ENABLED
                  value: {{ .Values.security.encryptionEnabled | toString | quote }}
                {{- if .Values.security.encryptionEnabled }}
                - name: ENCRYPTION_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "mongodb-backup.name" . }}-secret
                      key: ENCRYPTION_PASSWORD
                {{- end }}
                - name: COMPRESSION_METHOD
                  value: {{ .Values.security.compressionMethod | quote }}
                - name: COMPRESSION_LEVEL
                  value: {{ .Values.security.compressionLevel | quote }}
                {{- if .Values.logging.level }}
                - name: LOG_LEVEL
                  value: {{ .Values.logging.level | quote }}
                {{- end }}
              resources:
                {{- toYaml .Values.resources | nindent 16 }}
              volumeMounts:
                - name: config-volume
                  mountPath: /app/config
                - name: backup-data
                  mountPath: /backup-data
                - name: log-volume
                  mountPath: /var/log/mongodb-backup
                - name: tmp-volume
                  mountPath: /tmp
                - name: home-volume
                  mountPath: /home
          volumes:
            - name: config-volume
              configMap:
                name: {{ include "mongodb-backup.name" . }}-config
            - name: backup-data
              persistentVolumeClaim:
                claimName: {{ include "mongodb-backup.name" . }}-backup-data
            - name: log-volume
              emptyDir: {}
            - name: tmp-volume
              emptyDir: {}
            - name: home-volume
              emptyDir: {}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
{{- end }}