{{- if and .Values.enabled .Values.schedule.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "mongodb-backup.name" . }}
  labels:
    {{- include "mongodb-backup.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.schedule.cronExpression | quote }}
  successfulJobsHistoryLimit: {{ .Values.schedule.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.schedule.failedJobsHistoryLimit }}
  concurrencyPolicy: {{ .Values.schedule.concurrencyPolicy }}
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.schedule.backoffLimit }}
      {{- if .Values.schedule.activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ .Values.schedule.activeDeadlineSeconds }}
      {{- end }}
      template:
        metadata:
          labels:
            {{- include "mongodb-backup.selectorLabels" . | nindent 12 }}
            role: mongodb-backup
        spec:
          serviceAccountName: {{ include "mongodb-backup.name" . }}
          securityContext:
            runAsUser: {{ .Values.securityContext.pod.runAsUser }}
            runAsGroup: {{ .Values.securityContext.pod.runAsGroup }}
            fsGroup: {{ .Values.securityContext.pod.fsGroup }}
          restartPolicy: OnFailure
          # Add init container to prepare the backup directory
          initContainers:
            - name: prepare-backup-dir
              image: busybox
              command:
                - sh
                - -c
                - |
                  echo "Preparing backup directories..."
                  # Create the main backup directory
                  mkdir -p {{ .Values.export.archiveDir }}
                  # Create the exports directory
                  mkdir -p {{ .Values.export.output_dir }}
                  
                  # Set proper permissions
                  chmod 777 {{ .Values.export.archiveDir }}
                  chmod 777 {{ .Values.export.output_dir }}
                  
                  # Create test files to verify writing works
                  echo "test" > {{ .Values.export.archiveDir }}/test.txt
                  echo "test" > {{ .Values.export.output_dir }}/test.txt
                  
                  echo "Directory structure:"
                  find {{ .Values.export.archiveDir }} -type d | sort
                  
                  echo "Backup directory preparation complete"
              volumeMounts:
                - name: backup-data
                  mountPath: {{ .Values.export.archiveDir }}
                - name: backup-data
                  mountPath: {{ .Values.export.output_dir }}
                  subPath: exports
          containers:
            - name: {{ .Chart.Name }}
              securityContext:
                runAsNonRoot: {{ .Values.securityContext.container.runAsNonRoot }}
                allowPrivilegeEscalation: {{ .Values.securityContext.container.allowPrivilegeEscalation }}
                capabilities:
                  drop:
                    {{- toYaml .Values.securityContext.container.capabilities.drop | nindent 20 }}
                # This is the key change - allow writing to the filesystem
                readOnlyRootFilesystem: false
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              # Add debugging to see what's happening
              command:
                - "/bin/bash"
                - "-c"
                - |
                  echo "Starting backup process..."
                  echo "Output directory: {{ .Values.export.output_dir }}"
                  echo "Archive directory: {{ .Values.export.archiveDir }}"
                  
                  echo "Directory contents before backup:"
                  ls -la {{ .Values.export.archiveDir }}
                  ls -la {{ .Values.export.output_dir }}
                  
                  echo "Running backup with options:"
                  echo "  Create Archive: {{ .Values.backupTool.createArchive }}"
                  echo "  Delete Original: {{ .Values.backupTool.deleteOriginal }}"
                  echo "  Save DB Info: {{ .Values.backupTool.saveDbInfo }}"
                  
                  # Run the backup command with the appropriate flags
                  /app/entrypoint.sh auto-backup \
                    {{- if .Values.backupTool.createArchive }} --create-archive{{- end }} \
                    {{- if not .Values.backupTool.deleteOriginal }} --keep-original{{- end }} \
                    {{- if .Values.backupTool.saveDbInfo }} --save-db-info{{- end }}
                  
                  echo "Backup completed with exit code: $?"
                  echo "Directory contents after backup:"
                  ls -la {{ .Values.export.archiveDir }}
                  ls -la {{ .Values.export.output_dir }}
                  
                  # Find the most recent archive
                  LATEST_ARCHIVE=$(find {{ .Values.export.archiveDir }} -name "*.mdb" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2-)
                  if [ -n "$LATEST_ARCHIVE" ]; then
                    echo "Latest archive created: $LATEST_ARCHIVE"
                    ls -la "$LATEST_ARCHIVE"
                  else
                    echo "No archives found"
                  fi
              env:
                - name: BACKUP_OUTPUT_DIR
                  value: "/backups"
                {{- if .Values.connection.username }}
                - name: MONGO_USERNAME
                  value: {{ .Values.connection.username | quote }}
                {{- end }}
                {{- if .Values.connection.password }}
                - name: MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "mongodb-backup.name" . }}-secret
                      key: MONGO_PASSWORD
                {{- end }}
                - name: MONGO_HOST
                  value: {{ .Values.connection.host | quote }}
                - name: MONGO_PORT
                  value: {{ .Values.connection.port | quote }}
                - name: MONGO_AUTH_DB
                  value: {{ .Values.connection.authDb | quote }}
                - name: USE_SSL
                  value: {{ .Values.connection.useSSL | toString | quote }}
                {{- if .Values.connection.sslCAFile }}
                - name: SSL_CA_FILE
                  value: {{ .Values.connection.sslCAFile | quote }}
                {{- end }}
                - name: PRETTY_JSON
                  value: {{ .Values.export.prettyJson | toString | quote }}
                - name: MAX_CONCURRENT_EXPORTS
                  value: {{ .Values.export.maxConcurrentExports | quote }}
                - name: EXCLUDE_DBS
                  value: {{ .Values.filters.excludeDbs | quote }}
                - name: EXCLUDE_COLLECTIONS
                  value: {{ .Values.filters.excludeCollections | quote }}
                - name: ENCRYPTION_ENABLED
                  value: {{ .Values.security.encryptionEnabled | toString | quote }}
                {{- if .Values.security.encryptionEnabled }}
                - name: ENCRYPTION_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "mongodb-backup.name" . }}-secret
                      key: ENCRYPTION_PASSWORD
                {{- end }}
                - name: COMPRESSION_METHOD
                  value: {{ .Values.security.compressionMethod | quote }}
                - name: COMPRESSION_LEVEL
                  value: {{ .Values.security.compressionLevel | quote }}
                {{- if .Values.logging.level }}
                - name: LOG_LEVEL
                  value: {{ .Values.logging.level | quote }}
                {{- end }}
              resources:
                {{- toYaml .Values.resources | nindent 16 }}
              volumeMounts:
                - name: config-volume
                  mountPath: /app/mongodb_backup.ini
                  subPath: mongodb_backup.ini
                - name: backup-data
                  mountPath: {{ .Values.export.archiveDir }}
                - name: backup-data
                  mountPath: {{ .Values.export.output_dir }}
                  subPath: exports
                - name: log-volume
                  mountPath: /var/log/mongodb-backup
                - name: helpers-volume
                  mountPath: /app/helpers
          volumes:
            - name: config-volume
              configMap:
                name: {{ include "mongodb-backup.name" . }}-config
            - name: backup-data
              persistentVolumeClaim:
                claimName: {{ include "mongodb-backup.name" . }}-backup-data
            - name: log-volume
              emptyDir: {}
            - name: helpers-volume
              configMap:
                name: {{ include "mongodb-backup.name" . }}-helpers
                defaultMode: 0755  # Make scripts executable
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
{{- end }}